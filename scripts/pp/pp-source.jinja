#include <{{ declr["hdr_fname"] }}>

{% for ent in declr["ents"] if ent["kind"] == "g" -%}
const char *
{{ ent["name"] }}_str(enum {{ ent["name"] }} obj)
{
	switch (obj) {
	{% for sym_name, sym_name_short in ent["members"] -%}
	case {{ sym_name }}:
		return "{{ sym_name_short }}";
	{% endfor -%}
	}

	return "ENOSYS";
}

{% endfor %}
{% for struct in structs %}
static inline int
{{ struct["name"] }}_yaml(FILE *stream, const struct xnvme_geo *obj, int indent, const char *sep, int head)
{
	int wrtn = 0;

	if (head) {
		wrtn += fprintf(stream, "%*s{{ struct["name"] }}:", indent, "");
		indent += 2;
	}
	if (!obj) {
		wrtn += fprintf(stream, " ~");
		return wrtn;
	}
	if (head) {
		wrtn += fprintf(stream, "\n");
	}

	{% for (field, fmt) in struct["members"].items() -%}
	{% if fmt.endswith("_str") -%}
	wrtn += fprintf(stream, "%*s{{ field }}: %s%s",
			indent, "", {{ fmt }}(geo->{{ field }}), {% if loop.last %}""{% else %}sep{% endif %});
	{%- else %}
	wrtn += fprintf(stream, "%*s{{ field }}: {{ fmt }}%s",
			indent, "", geo->{{ field }}, {% if loop.last %}""{% else %}sep{% endif %});
	{%- endif -%}
	{%- endfor %}

	return wrtn;
}

int
{{ struct["name"] }}_fpr(FILE *stream, const struct {{ struct["name"] }} *obj, int opts)
{
	int wrtn = 0;

	switch (opts) {
	case XNVME_PR_TERSE:
		wrtn += fprintf(stream, "# ENOSYS: opts(0x%x)", opts);
		return wrtn;

	case XNVME_PR_DEF:
	case XNVME_PR_YAML:
		break;
	}

	wrtn += {{ struct["name"] }}_yaml(stream, obj, 0, "\n", 1);
	wrtn += fprintf(stream, "\n");

	return wrtn;
}

int
{{ struct["name"] }}_pr(const struct {{ struct["name"] }} *obj, int opts)
{
	return {{ struct["name"] }}_fpr(stdout, obj, opts);
}
{% endfor %}
